#!/usr/bin/env python2
# -*- backup-inhibited: true; encoding: utf-8 -*-
#
# bin/statewatch
#
# oveja eléctrica
# copyright (c) 2003-2017 santiago peresón <yaco@yaco.net>
# http://yaco.net/oe/
#
# this file is part of 'oe3', which is released under the gnu general public
# license, version 3. see LICENSE for full license details.
#

"""internal oe3 state watcher for voe3t"""


from __future__ import division, print_function, unicode_literals

__version__ = '1.0.0'

import argparse
import curses
import json
import logging
import os
import sys
import time
from os.path import exists, getmtime

import arrow
import numpy

sys.path.append(os.path.abspath(os.path.dirname(__file__) + '/../lib'))
from oe3 import utils
from oe3.comp.spectrofoto import pformat_choices


_log  = logging.getLogger('voe3t')
_conf = {}


def main(argv = sys.argv):
  """read module states and display them graphically"""

  global _cols, _conf

  # parse options
  parser = argparse.ArgumentParser(description=__doc__)
  args   = parser.parse_args()

  # get terminal size
  # XXX py3k: replace with os.get_terminal_size!
  curses.setupterm()
  _cols  = curses.tigetnum('cols')

  # init
  _conf   = utils.load_json('etc/voe3t.json')
  modules = _conf['watched_modules']; modules.reverse()
  checks  = {m: arrow.get(0) for m in modules}
  dirty   = True
  _log.info("oe3 state watcher initialized")

  # main loop
  try:
    while True:

      # find runfile
      running = None
      for module in modules:
        if exists('run/{}.json'.format(module)):
          path = 'run/{}.json'.format(module)
          running = module
          break

      if running is None:
        if dirty:
          _log.debug("   nothing happening, clearing viewer...")
          os.system('clear')
          _print_clear()
          dirty = False
      elif arrow.get(getmtime(path)) > checks[running]:
        meta = utils.load_json(path)
        checks[module] = arrow.now()
        os.system('clear')
        eval("_print_{module}(meta)".format(module=module))
        dirty = True

      time.sleep(0.1)

  except KeyboardInterrupt:
    print(); exit(130)


def _print_clear():
  """clear the viewer"""

  print("\n\n\n\n\n\n{}{:^{}}{}\n\n\n\n".format(
    _setf('normal'), "⎡oe3 not running⎦", _cols, _setf(None)))


def _print_comp(meta):
  """print comp state: song meta, estim reduxes, choices, progress"""

  if 'img_idx' in meta:
    reduxes = [meta['reduxes'][img] for img in meta['img_idx']]
  else:
    reduxes = []
  _print_comp_header(meta)
  _print_reduxes(reduxes)
  _print_comp_footer(meta)
  _print_progress(meta['progress'])
  sys.stdout.flush()


def _print_interp(meta):
  """print interp state: song meta, estim reduxes, choices, fake progress"""

  reduxes = [meta['reduxes'][img] for img in meta['img_idx']]
  dur     = meta['duration']
  start   = time.time()
  end     = start + dur
  while time.time() < end:
    played = time.time() - start
    prog   = played * 100 / dur
    os.system('clear')
    _print_interp_header(meta)
    _print_reduxes(reduxes)
    _print_comp_footer(meta)
    _print_progress(prog)
    sys.stdout.flush()
    time.sleep(0.5)
  while exists('run/interp.son'): time.sleep(0.1)


def _print_comp_header(meta):
  """print song metadata"""

  header = "{subcomp} · {estim_name} ⎡{estim_id}⎦".format(
    subcomp    = meta['comp'][0].lower(),
    estim_name = meta['estim_name'],
    estim_id   = meta['estim_id']
  )
  print("{}{:^{}}{}".format(
    _setf('normal'), header, _cols, _setf(None)))


def _print_comp_footer(meta):
  """print pretty comp choices"""

  if 'choices' in meta:
    choice_l = pformat_choices(meta['choices'], joined=False)
    termed   = ''
    for choice in choice_l:
      tmp, cert = choice.split('.')
      asp, val  = tmp.split(':')
      if int(cert) > 50:
        termed += "{}:{}{}{} ".format(
          asp, _setf('bright'), val, _setf('normal'))
      else:
        termed += asp + ':' + val + ' '
    # width: 87 [11 choices * (7 chars + space) - 1 space]
    pad = ' ' * ((_cols - 87) // 2)

  else:
    termed = "⎡nochoices⎦"
    # width: 11
    pad = ' ' * ((_cols - 11) // 2)

  print("{}{}{}{}".format(
    pad, _setf('normal'), termed, _setf(None)))


def _print_interp_header(meta):
  """print song metadata"""

  header = "{subcomp} · {song} ⎡{estim}⎦ · {duration}".format(
    subcomp  = meta['comp'][0].lower(),
    song     = meta['id'],
    estim    = meta['estim_name'],
    duration = utils.secs2mmss(meta['duration']).strip()
  )
  print("{}{:^{}}{}".format(
    _setf('normal'), header, _cols, _setf(None)))


def _print_progress(prog):
  """print progress bar"""

  width  = _cols - 6
  filled = numpy.clip(int(prog * width / 100 + 0.5), 3, width)
  pad    = ' ' * (width - filled) + _setf('r5')
  if filled > width - 1:
    bar = '─' * filled + pad
  else:
    bar = '{}{}─{}─{}'.format(
      '─' * (filled - 2), _setf('r3'), _setf('r1'), pad)
  print("  {}⎡{}⎦{} ".format(_setf('r5'), bar, _setf(None)), end='')


def _print_reduxes(reduxes):
  """show pretty reduxes"""

  len_reduxes = len(reduxes)
  if len_reduxes == 0:
    print("\n\n\n\n{}{}⎡noestim⎦\n\n\n\n".format(
      _setf('normal'), ' ' * ((_cols - 9) // 2)))
  elif len_reduxes < 11:
    print('\n\n')
    _print_redux_line(reduxes)
    print('\n\n')
  elif len_reduxes < 29:
    half = -(-len_reduxes // 2)
    print()
    _print_redux_line(reduxes[:half])
    print()
    _print_redux_line(reduxes[half:])
    print()
  else:
    #reduxes = reduxes[:51]  # XXX to-do: decide how to show bigger colls
    max_reduxes = (_cols // 6) * 3
    if len_reduxes > max_reduxes:
      del reduxes[max_reduxes:]
    one_3rd  = -(-len(reduxes) // 3)  # ceiling int division
    two_3rds = one_3rd * 2
    _print_redux_line(reduxes[:one_3rd])
    _print_redux_line(reduxes[one_3rd : two_3rds])
    _print_redux_line(reduxes[two_3rds:])
    if len_reduxes > max_reduxes:
      print('\x1b[1A\x1b[{}C{}…'.format(_cols - 1, _setf('bright')), end='')


def _print_redux_line(reduxes):
  """print one line of formatted reduxes"""

  rcurses     = map(_redux2term, reduxes)
  rcurses_zip = zip(*rcurses)

  pad = ' ' * ((_cols - (len(reduxes) * 6 - 1)) // 2)
  print(pad, ('\n' + pad).join([" ".join(l) for l in rcurses_zip]), sep='')


def _redux2term(redux):
  """generate a three-tuple of 5-char strings for screen printing"""

  rlines = ["00000"] + [redux[i:i+5] for i in range(0, len(redux), 5)]
  termed = [''.join(map(_tup2term, rlines[0], rlines[1])) + _setf(None),
            ''.join(map(_tup2term, rlines[2], rlines[3])) + _setf(None),
            ''.join(map(_tup2term, rlines[4], rlines[5])) + _setf(None)]
  return termed


def _tup2term(top, bot):
  """char tuple to term sequence"""

  return "{}{}▄".format(_setf('r' + top, bg=True), _setf('r' + bot))


def _setf(color, bg=False):
  """generate a color term escape sequence"""

  if color is not None:
    fgbg = 38 if not bg else 48
    return "\x1b[{};5;{}m".format(fgbg, _conf['colors'][color])
  else:
    return "\x1b[0m"


if __name__ == "__main__":
  try:
    exit(main(sys.argv))
  except KeyboardInterrupt:
    print(); exit(130)
