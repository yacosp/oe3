#!/usr/bin/env python2
# -*- backup-inhibited: true -*-
#
# oveja electrica - oe3.0.1:bleu
# copyright (c) 2003-2017 santiago pereson <yaco@yaco.net>
# http://yaco.net/oe/
#
# this file is part of 'oe3', which is released under the gnu general public
# license, version 3. see LICENSE for full license details.
#

"""oe3
oe3 comp runner

usage: bin/oe3 [options]

options:
  -c, --choices=CHOICES        forced choices, ie: 'timbres:bps,sort:none'
  -d, --pdb                    run through pdb
  -e, --estim=ESTIM_META       use fixed estim instead of a gatil-chosen one
  -i, --show-images            show images instead of reduxes
  -l, --list                   list songs with rewards
  -m, --min-song-dur=S         min song dur (seconds)
  -M, --max-song-dur=S         max song dur (seconds)
  -n, --count                  number of times to run
  -r, --reward=SONG[,SONG...]  play song(s) and ask for reward
  -R, --no-reward              don't wait for reward
  -h, --help                   show this help message and exit
"""


from __future__ import division

__version__ = '0.1.2'

import gc
import getopt
import logging
import os
import pdb
import sys
import time

from glob   import glob
from pprint import pformat

sys.path.append(os.path.abspath(os.path.dirname(__file__) + "/../lib"))
from oe3 import anatta, oe3_path, opus, utils
from oe3.coag import core as coag
from oe3.coag import estim
from oe3.comp import spectrofoto
from oe3.comp.spectrofoto import tbr_pretty
from oe3.crit import REWARDS

log = logging.getLogger('oe3')

#------------------------------------------------------------------------------
def main(argv=None):
  if argv is None: argv = sys.argv

  # parse command line options
  try:
    opts, args = getopt.getopt(argv[1:],
                               "c:de:ilm:M:n:r:Rh",
                               ["choices=", "pdb", "estim=",
                                "show-images", "list", "min-song-dur=",
                                "max-song-dur=", "count=", "reward=",
                                "no-reward", "help"])
  except getopt.error, msg:
    print msg
    print __doc__
    return 2

  # set defaults
  choices     = None
  use_pdb     = False
  fixed_ice   = None
  show_images = False
  list_songs  = False
  min_sd      = None
  max_sd      = None
  count       = 1
  rwd_song_l  = None
  no_reward   = False

  # process options
  for o, a in opts:
    if o in ("-c", "--choices"):
      choices = dict([c.split(":") for c in a.split(",")])
    elif o in ("-d", "--pdb"):
      use_pdb = True
    elif o in ("-e", "--estim"):
      fixed_ice = estim.ImageCollEstim(a)
    elif o in ("-i", "--show-images"):
      show_images = True
    elif o in ("-l", "--list"):
      list_songs = True
    elif o in ("-m", "--min-song-dur"):
      min_sd = int(a)
    elif o in ("-M", "--max-song-dur"):
      max_sd = int(a)
    elif o in ("-n", "--count"):
      count = int(a)
    elif o in ("-r", "--reward"):
      rwd_song_l = _parse_rwd_song_l(a)
    elif o in ("-R", "--no-reward"):
      no_reward = True
    elif o in ("-h", "--help"):
      print __doc__
      return 0

  # list
  if list_songs:
    _list_songs()
    return 0

  # reward
  if rwd_song_l is not None:
    try:
      _reward_songs(rwd_song_l)
      return 0
    except KeyboardInterrupt:
      log.warning("interrupted!")
      return 130

  # run comp
  if use_pdb: pdb.set_trace()
  cg = coag.Coag()
  for i in range(count):
    log.info('-' * 127)
    log.info("starting new song...")
    if fixed_ice == None:
      log.info("choosing estim...")
      ice = cg.rand_estim('type', 'imagecoll')
    else:
      ice = fixed_ice
    print "estim:    %s (%s)" % (ice.id, ice.name)
    try:
      _run_spectrofoto(ice, choices, show_images,
                       min_sd, max_sd, no_reward)
    except KeyboardInterrupt:
      log.warning("interrupted!")
      return 130
  return 0

#------------------------------------------------------------------------------
def _run_spectrofoto(ice=None, choices=None, show_images=False, min_sd=None,
                   max_sd=None, no_reward=False):
  """create one song"""

  gc.collect()
  log.info("running comp...")
  sf = spectrofoto.Spectrofoto()
  sf.conf['show_images'] = show_images
  if min_sd is not None: sf.conf['min_song_dur'] = min_sd
  if max_sd is not None: sf.conf['max_song_dur'] = max_sd
  sg = sf.create(ice, choices=choices)

  _play_song(sg)
  if not no_reward:
    sf.learn(sg, _get_reward())
  print

#------------------------------------------------------------------------------
def _list_songs():
  """list all songs and rewards"""

  # header
  headers = [('song', 15), ('estim', 35), ('opus', 4),
             ('tbr', 3),   ('dur', 9),    ('rwd', 3)]
  print("oe3:{} opus list:\n".format(anatta['name']))
  print('  '.join([("{:{}}" if t != 'dur' else "{:^{}}").format(t, w)
                   for (t, w) in headers]))
  print('  '.join(map(lambda x: '-' * x, [w for (t, w) in headers])))

  # song list
  opus  = 0
  for path in sorted(glob('var/opus/*.pyd.bz2')):
    meta    = utils.load_bzdict(path)
    opus   += 1
    reward  = '{:+3d}'.format(meta['reward'][0]) if 'reward' in meta else ' --'
    print(u"{}  {}-{:19.19}  {:4d}  {}  {:>9}  {}".format(
      meta['id'],
      meta['estim_id'],
      meta['estim_name'],
      opus,
      tbr_pretty[meta['choices']['timbres'][0]],
      utils.secs2mmss(meta['dur']),
      reward
    ))
  print('')

#------------------------------------------------------------------------------
def _reward_songs(song_l):
  """play a song and ask for reward"""
  sf = spectrofoto.Spectrofoto()
  for song_id in song_l:
    song = opus.song.Song(
      os.path.join('var/opus', song_id + '.pyd.bz2'))
    _play_song(song)
    sf.learn(song, _get_reward())
    print('')

#------------------------------------------------------------------------------
def _play_song(song):
  """play a song"""

  # XXX this should be the interp!
  log.info("playing song {}...".format(song.id))
  print "song:    ", song.id
  #mdur = max(t['dur'] for t in song.tracklist.values() if t is not None)
  meta = {
    'comp':       song.comp,
    'id':         song.id,
    'estim_id':   song.estim.id,
    'estim_name': song.estim.name,
    'img_idx':    song.img_idx,
    'reduxes':    song.img_reduxes,
    'choices':    song.choices,
    'duration':   song.dur,
    'progress':   5,
  }
  utils.save_runfile('interp', meta)
  print "duration:", (utils.secs2mmss(song.dur).strip())
  if '/' not in song.sfile:
    song.sfile = oe3_path + '/var/opus/' + song.sfile
  print "playing: ", song.sfile
  utils.shexec("ogg123 %s", song.sfile)
  time.sleep(.5)
  utils.save_runfile('interp', {})

#------------------------------------------------------------------------------
def _get_reward():
  """interactive get reward"""
  # XXX add '!' reward (+11) for exceptional songs?
  rwd = raw_input("reward [12345dq] ? ")
  while rwd not in "12345dq":
    rwd = raw_input("reward [12345dq] ? ")
  if rwd == "d":
    rwd = ""
    pdb.set_trace()
  if rwd in ("q", ""): sys.exit(2)
  return (REWARDS[int(rwd) - 1], None, None)

#------------------------------------------------------------------------------
def _parse_rwd_song_l(argstr):
  """parse the --reward option value"""
  song_l = argstr.split(',')
  return song_l

#------------------------------------------------------------------------------
if __name__ == "__main__":
  sys.exit(main())
